# This is a simple "hacky" CI that will run the
# `make` command in the dev docker.
#
# It is to get something working rather then working on
# a complete version that creates all of the docker images
# needed in the cloud.
#
# It uses the "Docker-in-Docker" pattern:
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-the-docker-executor-with-the-docker-image-docker-in-docker
image: docker:20.10.16

variables:
  # When using dind service, we need to instruct docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. Docker 19.03 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
  #
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  IMAGE_NAME: build-up/phoenix
  AWS_PUBLIC_SERVER: public.ecr.aws
  TAG_LATEST: $AWS_PUBLIC_SERVER/$IMAGE_NAME:latest
  TAG_COMMIT: $AWS_PUBLIC_SERVER/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
  TAG_BRANCH: $AWS_PUBLIC_SERVER/$IMAGE_NAME:$CI_COMMIT_REF_SLUG
  IMAGE_FILE_FOR_BUILD: phoenix-image-for-commit-$CI_COMMIT_SHORT_SHA.tar.gz
  DOCKER_TLS_CERTDIR: "/certs"

services:
  - docker:20.10.16-dind

before_script:
  - docker info

cache:
  key: $CI_COMMIT_SHORT_SHA
  paths:
    - $IMAGE_FILE_FOR_BUILD

build_phoenix_for_commit:
  stage: build
  script:
    - docker pull $TAG_LATEST || true
    - >
      docker build
      --build-arg PROJECT=all
      --cache-from $TAG_LATEST
      -t $TAG_COMMIT
      -f docker/Dockerfile .
    - docker save $TAG_COMMIT | gzip > $IMAGE_FILE_FOR_BUILD

test_in_phoenix_docker_image:
  stage: test
  script:
    - docker load --input $IMAGE_FILE_FOR_BUILD
    - docker run $TAG_COMMIT

# Push of the image taken from:
# https://datawookie.dev/blog/2022/02/pushing-docker-images-from-gitlab-to-aws-ecr/
push_images:
  only:
    - main
    # All the ci/ branches are also protected
    - /^ci\/.*$/
  stage: deploy
  script:
    - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - export AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}
    - export AWS_REGION=${AWS_REGION}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - apk add --no-cache python3 py3-pip
    - pip3 install --no-cache-dir awscli
    - docker load --input $IMAGE_FILE_FOR_BUILD
    - >
      aws ecr-public get-login-password
      --region $AWS_REGION | docker login
      --username AWS
      --password-stdin $AWS_PUBLIC_SERVER
    - docker tag $TAG_COMMIT $TAG_LATEST
    - docker tag $TAG_COMMIT $TAG_BRANCH
    - docker push $TAG_LATEST
    - docker push $TAG_COMMIT
    - docker push $TAG_BRANCH
    - echo -e "Created images with URLs\n
        Latest ${TAG_LATEST}\n
        Commit ${TAG_COMMIT}\n
        Branch ${TAG_BRANCH}"
